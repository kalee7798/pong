# https://py2.codeskulptor.org/#user48_puedIJfMvoPLQ46.py
# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [0,0]

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    
    # doris-start
    global RIGHT, LEFT #local variable 'LEFT' referenced before assignment
    ball_pos = [WIDTH/2, HEIGHT/2]
    ball_vel = [1,1]
    
    if direction == 1:
        RIGHT = True
        LEFT = False
    
    elif direction == 0:
        LEFT = True
        RIGHT = False
    
    if (RIGHT == True and LEFT == False):
        ball_vel=[random.randrange(2,4), -random.randrange(1,3)] #RIGHT means upwards and towards the right
    elif (RIGHT == False and LEFT == True):
        ball_vel=[-random.randrange(2,4), -random.randrange(1,3)] #LEFT means upwards and towards the left
    # doris-end
       
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = HEIGHT/2 - HALF_PAD_HEIGHT # doris step#7 top of right paddle
    paddle2_pos = HEIGHT/2 - HALF_PAD_HEIGHT # doris step#7 top of left paddle
    
    spawn_ball(random.randrange(0,2)) # doris step#2

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    # doris- start
    # (wrong) ball_pos = ball_pos + ball_vel # update ball position
    if (ball_pos[1]-BALL_RADIUS <= 0): # bounce top wall? 
        ball_vel[1]=-ball_vel[1]
    elif (ball_pos[1]+BALL_RADIUS >= HEIGHT): #bounce bottom wall?
        ball_vel[1]=-ball_vel[1]    
        
    if (ball_pos[0]-BALL_RADIUS <= PAD_WIDTH): # touch left wall? 
        spawn_ball(1) # direction = RIGHT
    elif (ball_pos[0]+BALL_RADIUS >= WIDTH-PAD_WIDTH): # touch right wall?
        spawn_ball(0) # direction = LEFT
    
    ball_pos[0] = ball_pos[0] + ball_vel[0]
    ball_pos[1] = ball_pos[1] + ball_vel[1]
    # doris- end
            
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 0.1, "Yellow", "Yellow") # doris- draw the ball
    
    # update paddle's vertical position, keep paddle on the screen
    
    # draw paddles
    
    # doris-start step#7
    # WRONG canvas.draw_line([WIDTH-PAD_WIDTH, paddle1_pos], [WIDTH, paddle1_pos], [WIDTH, paddle1_pos+PAD_HEIGHT],[WIDTH-PAD_WIDTH, paddle1_pos+PAD_HEIGHT]) # right paddle
    # WRONG canvas.draw_line([0, paddle2_pos], [PAD_WIDTH, paddle2_pos], [PAD_WIDTH, paddle2_pos+PAD_HEIGHT],[0, paddle2_pos+PAD_HEIGHT]) # left paddle
    canvas.draw_polygon([(WIDTH-PAD_WIDTH, paddle1_pos), (WIDTH, paddle1_pos), (WIDTH, paddle1_pos+PAD_HEIGHT),(WIDTH-PAD_WIDTH, paddle1_pos+PAD_HEIGHT)], 1, 'Yellow', 'Yellow') # right paddle
    canvas.draw_polygon([(0, paddle2_pos), (PAD_WIDTH, paddle2_pos), (PAD_WIDTH, paddle2_pos+PAD_HEIGHT),(0, paddle2_pos+PAD_HEIGHT)], 1, 'Yellow','Yellow') # left paddle
    # doris-end 
    
    # determine whether paddle and ball collide    
    
    # draw scores
        
def keydown(key):
    global paddle1_vel, paddle2_vel
   
def keyup(key):
    global paddle1_vel, paddle2_vel


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
